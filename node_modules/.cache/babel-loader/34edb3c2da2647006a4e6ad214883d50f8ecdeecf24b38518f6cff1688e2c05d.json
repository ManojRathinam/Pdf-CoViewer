{"ast":null,"code":"var _jsxFileName = \"D:\\\\pdf co-viewer\\\\pdf-sync-client\\\\src\\\\context\\\\PdfContext.js\",\n  _s = $RefreshSig$();\n// context/PdfContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfContext = /*#__PURE__*/createContext();\nconst PdfProvider = ({\n  children\n}) => {\n  _s();\n  const [page, setPage] = useState(1);\n  const socket = io('http://localhost:8000/ws/pdf_sync/');\n  useEffect(() => {\n    // Your socket connection logic\n    socket.on('pdf-update', data => {\n      // Handle the socket event\n    });\n\n    // Cleanup the socket on component unmount\n    return () => {\n      socket.off('pdf-update');\n    };\n  }, [socket]); // Ensure 'socket' is included in the dependency array\n\n  const updatePage = newPage => {\n    socket.emit('page', {\n      page: newPage\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(PdfContext.Provider, {\n    value: {\n      page,\n      updatePage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfProvider, \"LMxNfAY58b6loOOsHmH6zd80VGE=\");\n_c = PdfProvider;\nexport { PdfContext, PdfProvider };\nvar _c;\n$RefreshReg$(_c, \"PdfProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","PdfContext","PdfProvider","children","_s","page","setPage","socket","on","data","off","updatePage","newPage","emit","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/pdf co-viewer/pdf-sync-client/src/context/PdfContext.js"],"sourcesContent":["// context/PdfContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst PdfContext = createContext();\r\n\r\nconst PdfProvider = ({ children }) => {\r\n  const [page, setPage] = useState(1);\r\n  const socket = io('http://localhost:8000/ws/pdf_sync/');\r\n\r\n  useEffect(() => {\r\n    // Your socket connection logic\r\n    socket.on('pdf-update', (data) => {\r\n      // Handle the socket event\r\n    });\r\n  \r\n    // Cleanup the socket on component unmount\r\n    return () => {\r\n      socket.off('pdf-update');\r\n    };\r\n  }, [socket]); // Ensure 'socket' is included in the dependency array\r\n  \r\n\r\n  const updatePage = (newPage) => {\r\n    socket.emit('page', { page: newPage });\r\n  };\r\n\r\n  return (\r\n    <PdfContext.Provider value={{ page, updatePage }}>\r\n      {children}\r\n    </PdfContext.Provider>\r\n  );\r\n};\r\n\r\nexport { PdfContext, PdfProvider };\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;AAElC,MAAMO,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAMW,MAAM,GAAGT,EAAE,CAAC,oCAAoC,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd;IACAU,MAAM,CAACC,EAAE,CAAC,YAAY,EAAGC,IAAI,IAAK;MAChC;IAAA,CACD,CAAC;;IAEF;IACA,OAAO,MAAM;MACXF,MAAM,CAACG,GAAG,CAAC,YAAY,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC;;EAGd,MAAMI,UAAU,GAAIC,OAAO,IAAK;IAC9BL,MAAM,CAACM,IAAI,CAAC,MAAM,EAAE;MAAER,IAAI,EAAEO;IAAQ,CAAC,CAAC;EACxC,CAAC;EAED,oBACEZ,OAAA,CAACC,UAAU,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEV,IAAI;MAAEM;IAAW,CAAE;IAAAR,QAAA,EAC9CA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAACf,EAAA,CA1BIF,WAAW;AAAAkB,EAAA,GAAXlB,WAAW;AA4BjB,SAASD,UAAU,EAAEC,WAAW;AAAG,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}